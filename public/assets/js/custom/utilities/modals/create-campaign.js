/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/create-campaign.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/create-campaign.js ***!
  \*****************************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTCreateCampaign = function () {\n  // Elements\n  var modal;\n  var modalEl;\n  var stepper;\n  var form;\n  var formSubmitButton;\n  var formContinueButton; // Variables\n\n  var stepperObj;\n  var validations = []; // Private Functions\n\n  var initStepper = function initStepper() {\n    // Initialize Stepper\n    stepperObj = new KTStepper(stepper); // Stepper change event(handle hiding submit button for the last step)\n\n    stepperObj.on('kt.stepper.changed', function (stepper) {\n      if (stepperObj.getCurrentStepIndex() === 4) {\n        formSubmitButton.classList.remove('d-none');\n        formSubmitButton.classList.add('d-inline-block');\n        formContinueButton.classList.add('d-none');\n      } else if (stepperObj.getCurrentStepIndex() === 5) {\n        formSubmitButton.classList.add('d-none');\n        formContinueButton.classList.add('d-none');\n      } else {\n        formSubmitButton.classList.remove('d-inline-block');\n        formSubmitButton.classList.remove('d-none');\n        formContinueButton.classList.remove('d-none');\n      }\n    }); // Validation before going to next page\n\n    stepperObj.on('kt.stepper.next', function (stepper) {\n      console.log('stepper.next'); // Validate form before change stepper step\n\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            stepper.goNext(); //KTUtil.scrollTop();\n          } else {\n            // Show error message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-light\"\n              }\n            }).then(function () {//KTUtil.scrollTop();\n            });\n          }\n        });\n      } else {\n        stepper.goNext();\n        KTUtil.scrollTop();\n      }\n    }); // Prev event\n\n    stepperObj.on('kt.stepper.previous', function (stepper) {\n      console.log('stepper.previous');\n      stepper.goPrevious();\n      KTUtil.scrollTop();\n    });\n    formSubmitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Disable button to avoid multiple click \n\n      formSubmitButton.disabled = true; // Show loading indication\n\n      formSubmitButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\n\n      setTimeout(function () {\n        // Hide loading indication\n        formSubmitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n        formSubmitButton.disabled = false;\n        stepperObj.goNext(); //KTUtil.scrollTop();\n      }, 2000);\n    });\n  }; // Init form inputs\n\n\n  var initForm = function initForm() {\n    // Init age slider\n    var slider = document.querySelector(\"#kt_modal_create_campaign_age_slider\");\n    var valueMin = document.querySelector(\"#kt_modal_create_campaign_age_min\");\n    var valueMax = document.querySelector(\"#kt_modal_create_campaign_age_max\");\n    noUiSlider.create(slider, {\n      start: [18, 40],\n      connect: true,\n      range: {\n        \"min\": 13,\n        \"max\": 80\n      }\n    });\n    slider.noUiSlider.on(\"update\", function (values, handle) {\n      if (handle) {\n        valueMax.innerHTML = Math.round(values[handle]);\n      } else {\n        valueMin.innerHTML = Math.round(values[handle]);\n      }\n    }); // Init tagify\n\n    var tagify = new Tagify(document.querySelector('#kt_modal_create_campaign_location'), {\n      delimiters: null,\n      templates: {\n        tag: function tag(tagData) {\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\s+/g, '-') + '.svg';\n\n          try {\n            // _ESCAPE_START_\n            return \"<tag title='\".concat(tagData.value, \"' contenteditable='false' spellcheck=\\\"false\\\" class='tagify__tag \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"' \").concat(this.getAttributes(tagData), \">\\n                                <x title='remove tag' class='tagify__tag__removeBtn'></x>\\n                                <div class=\\\"d-flex align-items-center\\\">\\n                                    \").concat(tagData.code ? \"<img onerror=\\\"this.style.visibility = 'hidden'\\\" class=\\\"w-25px rounded-circle me-2\\\" src='\".concat(countryPath, \"' />\") : '', \"\\n                                    <span class='tagify__tag-text'>\").concat(tagData.value, \"</span>\\n                                </div>\\n                            </tag>\"); // _ESCAPE_END_\n          } catch (err) {}\n        },\n        dropdownItem: function dropdownItem(tagData) {\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\s+/g, '-') + '.svg';\n\n          try {\n            // _ESCAPE_START_\n            return \"<div class='tagify__dropdown__item \".concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"'>\\n                                    <img onerror=\\\"this.style.visibility = 'hidden'\\\" class=\\\"w-25px rounded-circle me-2\\\"\\n                                         src='\").concat(countryPath, \"' />\\n                                    <span>\").concat(tagData.value, \"</span>\\n                                </div>\"); // _ESCAPE_END_\n          } catch (err) {}\n        }\n      },\n      enforceWhitelist: true,\n      whitelist: [{\n        value: 'Argentina',\n        code: 'AR'\n      }, {\n        value: 'Australia',\n        code: 'AU',\n        searchBy: 'beach, sub-tropical'\n      }, {\n        value: 'Austria',\n        code: 'AT'\n      }, {\n        value: 'Brazil',\n        code: 'BR'\n      }, {\n        value: 'China',\n        code: 'CN'\n      }, {\n        value: 'Egypt',\n        code: 'EG'\n      }, {\n        value: 'Finland',\n        code: 'FI'\n      }, {\n        value: 'France',\n        code: 'FR'\n      }, {\n        value: 'Germany',\n        code: 'DE'\n      }, {\n        value: 'Hong Kong',\n        code: 'HK'\n      }, {\n        value: 'Hungary',\n        code: 'HU'\n      }, {\n        value: 'Iceland',\n        code: 'IS'\n      }, {\n        value: 'India',\n        code: 'IN'\n      }, {\n        value: 'Indonesia',\n        code: 'ID'\n      }, {\n        value: 'Italy',\n        code: 'IT'\n      }, {\n        value: 'Jamaica',\n        code: 'JM'\n      }, {\n        value: 'Japan',\n        code: 'JP'\n      }, {\n        value: 'Jersey',\n        code: 'JE'\n      }, {\n        value: 'Luxembourg',\n        code: 'LU'\n      }, {\n        value: 'Mexico',\n        code: 'MX'\n      }, {\n        value: 'Netherlands',\n        code: 'NL'\n      }, {\n        value: 'New Zealand',\n        code: 'NZ'\n      }, {\n        value: 'Norway',\n        code: 'NO'\n      }, {\n        value: 'Philippines',\n        code: 'PH'\n      }, {\n        value: 'Singapore',\n        code: 'SG'\n      }, {\n        value: 'South Korea',\n        code: 'KR'\n      }, {\n        value: 'Sweden',\n        code: 'SE'\n      }, {\n        value: 'Switzerland',\n        code: 'CH'\n      }, {\n        value: 'Thailand',\n        code: 'TH'\n      }, {\n        value: 'Ukraine',\n        code: 'UA'\n      }, {\n        value: 'United Kingdom',\n        code: 'GB'\n      }, {\n        value: 'United States',\n        code: 'US'\n      }, {\n        value: 'Vietnam',\n        code: 'VN'\n      }],\n      dropdown: {\n        enabled: 1,\n        // suggest tags after a single character input\n        classname: 'extra-properties' // custom class for the suggestions dropdown\n\n      } // map tags' values to this property name, so this property will be the actual value and not the printed value on the screen\n\n    }); // add the first 2 tags and makes them readonly\n\n    var tagsToAdd = tagify.settings.whitelist.slice(0, 2);\n    tagify.addTags(tagsToAdd); // Init flatpickr\n\n    $(\"#kt_modal_create_campaign_datepicker\").flatpickr({\n      altInput: true,\n      enableTime: true,\n      altFormat: \"F j, Y H:i\",\n      dateFormat: \"Y-m-d H:i\",\n      mode: \"range\"\n    }); // Init dropzone\n\n    var myDropzone = new Dropzone(\"#kt_modal_create_campaign_files_upload\", {\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      paramName: \"file\",\n      // The name that will be used to transfer the file\n      maxFiles: 10,\n      maxFilesize: 10,\n      // MB\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        if (file.name == \"wow.jpg\") {\n          done(\"Naha, you don't.\");\n        } else {\n          done();\n        }\n      }\n    }); // Handle campaign duration options\n\n    var allDuration = document.querySelector('#kt_modal_create_campaign_duration_all');\n    var fixedDuration = document.querySelector('#kt_modal_create_campaign_duration_fixed');\n    var datepicker = document.querySelector('#kt_modal_create_campaign_datepicker');\n    [allDuration, fixedDuration].forEach(function (option) {\n      option.addEventListener('click', function (e) {\n        if (option.classList.contains('active')) {\n          return;\n        }\n\n        allDuration.classList.toggle('active');\n        fixedDuration.classList.toggle('active');\n\n        if (fixedDuration.classList.contains('active')) {\n          datepicker.nextElementSibling.classList.remove('d-none');\n        } else {\n          datepicker.nextElementSibling.classList.add('d-none');\n        }\n      });\n    }); // Init budget slider\n\n    var budgetSlider = document.querySelector(\"#kt_modal_create_campaign_budget_slider\");\n    var budgetValue = document.querySelector(\"#kt_modal_create_campaign_budget_label\");\n    noUiSlider.create(budgetSlider, {\n      start: [5],\n      connect: true,\n      range: {\n        \"min\": 1,\n        \"max\": 500\n      }\n    });\n    budgetSlider.noUiSlider.on(\"update\", function (values, handle) {\n      budgetValue.innerHTML = Math.round(values[handle]);\n\n      if (handle) {\n        budgetValue.innerHTML = Math.round(values[handle]);\n      }\n    }); // Handle create new campaign button\n\n    var restartButton = document.querySelector('#kt_modal_create_campaign_create_new');\n    restartButton.addEventListener('click', function () {\n      form.reset();\n      stepperObj.goTo(1);\n    });\n  };\n\n  var initValidation = function initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        campaign_name: {\n          validators: {\n            notEmpty: {\n              message: 'App name is required'\n            }\n          }\n        },\n        avatar: {\n          validators: {\n            file: {\n              extension: 'png,jpg,jpeg',\n              type: 'image/jpeg,image/png',\n              message: 'Please choose a png, jpg or jpeg files only'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      // Elements\n      modalEl = document.querySelector('#kt_modal_create_campaign');\n\n      if (!modalEl) {\n        return;\n      }\n\n      modal = new bootstrap.Modal(modalEl);\n      stepper = document.querySelector('#kt_modal_create_campaign_stepper');\n      form = document.querySelector('#kt_modal_create_campaign_stepper_form');\n      formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\"submit\"]');\n      formContinueButton = stepper.querySelector('[data-kt-stepper-action=\"next\"]');\n      initStepper();\n      initForm();\n      initValidation();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTCreateCampaign.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-campaign.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/utilities/modals/create-campaign.js"]();
/******/ 	
/******/ })()
;