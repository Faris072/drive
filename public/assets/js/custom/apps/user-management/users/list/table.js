/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/user-management/users/list/table.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/user-management/users/list/table.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("\n\nvar KTUsersList = function () {\n  // Define shared variables\n  var table = document.getElementById('kt_table_users');\n  var datatable;\n  var toolbarBase;\n  var toolbarSelected;\n  var selectedCount; // Private functions\n\n  var initUserTable = function initUserTable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var lastLogin = dateRow[3].innerText.toLowerCase(); // Get last login time\n\n      var timeCount = 0;\n      var timeFormat = 'minutes'; // Determine date & time format -- add more formats when necessary\n\n      if (lastLogin.includes('yesterday')) {\n        timeCount = 1;\n        timeFormat = 'days';\n      } else if (lastLogin.includes('mins')) {\n        timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n        timeFormat = 'minutes';\n      } else if (lastLogin.includes('hours')) {\n        timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n        timeFormat = 'hours';\n      } else if (lastLogin.includes('days')) {\n        timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n        timeFormat = 'days';\n      } else if (lastLogin.includes('weeks')) {\n        timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n        timeFormat = 'weeks';\n      } // Subtract date/time from today -- more info on moment datetime subtraction: https://momentjs.com/docs/#/durations/subtract/\n\n\n      var realDate = moment().subtract(timeCount, timeFormat).format(); // Insert real date to last login attribute\n\n      dateRow[3].setAttribute('data-order', realDate); // Set real date for joined column\n\n      var joinedDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\n\n      dateRow[5].setAttribute('data-order', joinedDate);\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 10,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 0\n      }, // Disable ordering on column 0 (checkbox)\n      {\n        orderable: false,\n        targets: 6\n      } // Disable ordering on column 6 (actions)                \n      ]\n    }); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n\n    datatable.on('draw', function () {\n      initToggleToolbar();\n      handleDeleteRows();\n      toggleToolbars();\n    });\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var filterSearch = document.querySelector('[data-kt-user-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Filter Datatable\n\n\n  var handleFilterDatatable = function handleFilterDatatable() {\n    // Select filter options\n    var filterForm = document.querySelector('[data-kt-user-table-filter=\"form\"]');\n    var filterButton = filterForm.querySelector('[data-kt-user-table-filter=\"filter\"]');\n    var selectOptions = filterForm.querySelectorAll('select'); // Filter datatable on submit\n\n    filterButton.addEventListener('click', function () {\n      var filterString = ''; // Get filter values\n\n      selectOptions.forEach(function (item, index) {\n        if (item.value && item.value !== '') {\n          if (index !== 0) {\n            filterString += ' ';\n          } // Build filter value options\n\n\n          filterString += item.value;\n        }\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n      datatable.search(filterString).draw();\n    });\n  }; // Reset Filter\n\n\n  var handleResetForm = function handleResetForm() {\n    // Select reset button\n    var resetButton = document.querySelector('[data-kt-user-table-filter=\"reset\"]'); // Reset datatable\n\n    resetButton.addEventListener('click', function () {\n      // Select filter options\n      var filterForm = document.querySelector('[data-kt-user-table-filter=\"form\"]');\n      var selectOptions = filterForm.querySelectorAll('select'); // Reset select2 values -- more info: https://select2.org/programmatic-control/add-select-clear-items\n\n      selectOptions.forEach(function (select) {\n        $(select).val('').trigger('change');\n      }); // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n      datatable.search('').draw();\n    });\n  }; // Delete subscirption\n\n\n  var handleDeleteRows = function handleDeleteRows() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-users-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault(); // Select parent row\n\n        var parent = e.target.closest('tr'); // Get user name\n\n        var userName = parent.querySelectorAll('td')[1].querySelectorAll('a')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + userName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + userName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            }).then(function () {\n              // Detect checked checkboxes\n              toggleToolbars();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  }; // Init toggle toolbar\n\n\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]'); // Select elements\n\n    toolbarBase = document.querySelector('[data-kt-user-table-toolbar=\"base\"]');\n    toolbarSelected = document.querySelector('[data-kt-user-table-toolbar=\"selected\"]');\n    selectedCount = document.querySelector('[data-kt-user-table-select=\"selected_count\"]');\n    var deleteSelected = document.querySelector('[data-kt-user-table-select=\"delete_selected\"]'); // Toggle delete selected toolbar\n\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    }); // Deleted selected rows\n\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected customers?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected customers!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            }); // Remove header checked box\n\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          }).then(function () {\n            toggleToolbars(); // Detect checked checkboxes\n\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected customers was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Toggle toolbars\n\n\n  var toggleToolbars = function toggleToolbars() {\n    // Select refreshed checkbox DOM elements \n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]'); // Detect checkboxes state & count\n\n    var checkedState = false;\n    var count = 0; // Count checked boxes\n\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    }); // Toggle toolbars\n\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  };\n\n  return {\n    // Public functions  \n    init: function init() {\n      if (!table) {\n        return;\n      }\n\n      initUserTable();\n      initToggleToolbar();\n      handleSearchDatatable();\n      handleResetForm();\n      handleDeleteRows();\n      handleFilterDatatable();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTUsersList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvdXNlci1tYW5hZ2VtZW50L3VzZXJzL2xpc3QvdGFibGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsV0FBVyxHQUFHLFlBQVk7RUFDMUI7RUFDQSxJQUFJQyxLQUFLLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixnQkFBeEIsQ0FBWjtFQUNBLElBQUlDLFNBQUo7RUFDQSxJQUFJQyxXQUFKO0VBQ0EsSUFBSUMsZUFBSjtFQUNBLElBQUlDLGFBQUosQ0FOMEIsQ0FRMUI7O0VBQ0EsSUFBSUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixHQUFZO0lBQzVCO0lBQ0EsSUFBTUMsU0FBUyxHQUFHUixLQUFLLENBQUNTLGdCQUFOLENBQXVCLFVBQXZCLENBQWxCO0lBRUFELFNBQVMsQ0FBQ0UsT0FBVixDQUFrQixVQUFBQyxHQUFHLEVBQUk7TUFDckIsSUFBTUMsT0FBTyxHQUFHRCxHQUFHLENBQUNGLGdCQUFKLENBQXFCLElBQXJCLENBQWhCO01BQ0EsSUFBTUksU0FBUyxHQUFHRCxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdFLFNBQVgsQ0FBcUJDLFdBQXJCLEVBQWxCLENBRnFCLENBRWlDOztNQUN0RCxJQUFJQyxTQUFTLEdBQUcsQ0FBaEI7TUFDQSxJQUFJQyxVQUFVLEdBQUcsU0FBakIsQ0FKcUIsQ0FNckI7O01BQ0EsSUFBSUosU0FBUyxDQUFDSyxRQUFWLENBQW1CLFdBQW5CLENBQUosRUFBcUM7UUFDakNGLFNBQVMsR0FBRyxDQUFaO1FBQ0FDLFVBQVUsR0FBRyxNQUFiO01BQ0gsQ0FIRCxNQUdPLElBQUlKLFNBQVMsQ0FBQ0ssUUFBVixDQUFtQixNQUFuQixDQUFKLEVBQWdDO1FBQ25DRixTQUFTLEdBQUdHLFFBQVEsQ0FBQ04sU0FBUyxDQUFDTyxPQUFWLENBQWtCLEtBQWxCLEVBQXlCLEVBQXpCLENBQUQsQ0FBcEI7UUFDQUgsVUFBVSxHQUFHLFNBQWI7TUFDSCxD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TEQsRUFUeUIsQ0FnQnpCOztJQUNBLElBQUlELFlBQUosRUFBa0I7TUFDZGhGLGFBQWEsQ0FBQ3FCLFNBQWQsR0FBMEI0RCxLQUExQjtNQUNBbkYsV0FBVyxDQUFDb0YsU0FBWixDQUFzQkMsR0FBdEIsQ0FBMEIsUUFBMUI7TUFDQXBGLGVBQWUsQ0FBQ21GLFNBQWhCLENBQTBCWixNQUExQixDQUFpQyxRQUFqQztJQUNILENBSkQsTUFJTztNQUNIeEUsV0FBVyxDQUFDb0YsU0FBWixDQUFzQlosTUFBdEIsQ0FBNkIsUUFBN0I7TUFDQXZFLGVBQWUsQ0FBQ21GLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QixRQUE5QjtJQUNIO0VBQ0osQ0F6QkQ7O0VBMkJBLE9BQU87SUFDSDtJQUNBQyxJQUFJLEVBQUUsZ0JBQVk7TUFDZCxJQUFJLENBQUMxRixLQUFMLEVBQVk7UUFDUjtNQUNIOztNQUVETyxhQUFhO01BQ2IwQixpQkFBaUI7TUFDakJHLHFCQUFxQjtNQUNyQmdCLGVBQWU7TUFDZmxCLGdCQUFnQjtNQUNoQlcscUJBQXFCO0lBRXhCO0VBZEUsQ0FBUDtBQWdCSCxDQW5UaUIsRUFBbEIsQyxDQXFUQTs7O0FBQ0E4QyxNQUFNLENBQUNDLGtCQUFQLENBQTBCLFlBQVk7RUFDbEM3RixXQUFXLENBQUMyRixJQUFaO0FBQ0gsQ0FGRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vYXBwcy91c2VyLW1hbmFnZW1lbnQvdXNlcnMvbGlzdC90YWJsZS5qcz9jOGJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUVXNlcnNMaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gRGVmaW5lIHNoYXJlZCB2YXJpYWJsZXNcclxuICAgIHZhciB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF90YWJsZV91c2VycycpO1xyXG4gICAgdmFyIGRhdGF0YWJsZTtcclxuICAgIHZhciB0b29sYmFyQmFzZTtcclxuICAgIHZhciB0b29sYmFyU2VsZWN0ZWQ7XHJcbiAgICB2YXIgc2VsZWN0ZWRDb3VudDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGluaXRVc2VyVGFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2V0IGRhdGUgZGF0YSBvcmRlclxyXG4gICAgICAgIGNvbnN0IHRhYmxlUm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IHRyJyk7XHJcblxyXG4gICAgICAgIHRhYmxlUm93cy5mb3JFYWNoKHJvdyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVSb3cgPSByb3cucXVlcnlTZWxlY3RvckFsbCgndGQnKTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdExvZ2luID0gZGF0ZVJvd1szXS5pbm5lclRleHQudG9Mb3dlckNhc2UoKTsgLy8gR2V0IGxhc3QgbG9naW4gdGltZVxyXG4gICAgICAgICAgICBsZXQgdGltZUNvdW50ID0gMDtcclxuICAgICAgICAgICAgbGV0IHRpbWVGb3JtYXQgPSAnbWludXRlcyc7XHJcblxyXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgZGF0ZSAmIHRpbWUgZm9ybWF0IC0tIGFkZCBtb3JlIGZvcm1hdHMgd2hlbiBuZWNlc3NhcnlcclxuICAgICAgICAgICAgaWYgKGxhc3RMb2dpbi5pbmNsdWRlcygneWVzdGVyZGF5JykpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVDb3VudCA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gJ2RheXMnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RMb2dpbi5pbmNsdWRlcygnbWlucycpKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lQ291bnQgPSBwYXJzZUludChsYXN0TG9naW4ucmVwbGFjZSgvXFxEL2csICcnKSk7XHJcbiAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gJ21pbnV0ZXMnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RMb2dpbi5pbmNsdWRlcygnaG91cnMnKSkge1xyXG4gICAgICAgICAgICAgICAgdGltZUNvdW50ID0gcGFyc2VJbnQobGFzdExvZ2luLnJlcGxhY2UoL1xcRC9nLCAnJykpO1xyXG4gICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9ICdob3Vycyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdExvZ2luLmluY2x1ZGVzKCdkYXlzJykpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVDb3VudCA9IHBhcnNlSW50KGxhc3RMb2dpbi5yZXBsYWNlKC9cXEQvZywgJycpKTtcclxuICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAnZGF5cyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdExvZ2luLmluY2x1ZGVzKCd3ZWVrcycpKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lQ291bnQgPSBwYXJzZUludChsYXN0TG9naW4ucmVwbGFjZSgvXFxEL2csICcnKSk7XHJcbiAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gJ3dlZWtzJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU3VidHJhY3QgZGF0ZS90aW1lIGZyb20gdG9kYXkgLS0gbW9yZSBpbmZvIG9uIG1vbWVudCBkYXRldGltZSBzdWJ0cmFjdGlvbjogaHR0cHM6Ly9tb21lbnRqcy5jb20vZG9jcy8jL2R1cmF0aW9ucy9zdWJ0cmFjdC9cclxuICAgICAgICAgICAgY29uc3QgcmVhbERhdGUgPSBtb21lbnQoKS5zdWJ0cmFjdCh0aW1lQ291bnQsIHRpbWVGb3JtYXQpLmZvcm1hdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gSW5zZXJ0IHJlYWwgZGF0ZSB0byBsYXN0IGxvZ2luIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICBkYXRlUm93WzNdLnNldEF0dHJpYnV0ZSgnZGF0YS1vcmRlcicsIHJlYWxEYXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldCByZWFsIGRhdGUgZm9yIGpvaW5lZCBjb2x1bW5cclxuICAgICAgICAgICAgY29uc3Qgam9pbmVkRGF0ZSA9IG1vbWVudChkYXRlUm93WzVdLmlubmVySFRNTCwgXCJERCBNTU0gWVlZWSwgTFRcIikuZm9ybWF0KCk7IC8vIHNlbGVjdCBkYXRlIGZyb20gNXRoIGNvbHVtbiBpbiB0YWJsZVxyXG4gICAgICAgICAgICBkYXRlUm93WzVdLnNldEF0dHJpYnV0ZSgnZGF0YS1vcmRlcicsIGpvaW5lZERhdGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBJbml0IGRhdGF0YWJsZSAtLS0gbW9yZSBpbmZvIG9uIGRhdGF0YWJsZXM6IGh0dHBzOi8vZGF0YXRhYmxlcy5uZXQvbWFudWFsL1xyXG4gICAgICAgIGRhdGF0YWJsZSA9ICQodGFibGUpLkRhdGFUYWJsZSh7XHJcbiAgICAgICAgICAgIFwiaW5mb1wiOiBmYWxzZSxcclxuICAgICAgICAgICAgJ29yZGVyJzogW10sXHJcbiAgICAgICAgICAgIFwicGFnZUxlbmd0aFwiOiAxMCxcclxuICAgICAgICAgICAgXCJsZW5ndGhDaGFuZ2VcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICdjb2x1bW5EZWZzJzogW1xyXG4gICAgICAgICAgICAgICAgeyBvcmRlcmFibGU6IGZhbHNlLCB0YXJnZXRzOiAwIH0sIC8vIERpc2FibGUgb3JkZXJpbmcgb24gY29sdW1uIDAgKGNoZWNrYm94KVxyXG4gICAgICAgICAgICAgICAgeyBvcmRlcmFibGU6IGZhbHNlLCB0YXJnZXRzOiA2IH0sIC8vIERpc2FibGUgb3JkZXJpbmcgb24gY29sdW1uIDYgKGFjdGlvbnMpICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlLWluaXQgZnVuY3Rpb25zIG9uIGV2ZXJ5IHRhYmxlIHJlLWRyYXcgLS0gbW9yZSBpbmZvOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9ldmVudC9kcmF3XHJcbiAgICAgICAgZGF0YXRhYmxlLm9uKCdkcmF3JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbml0VG9nZ2xlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICBoYW5kbGVEZWxldGVSb3dzKCk7XHJcbiAgICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2VhcmNoIERhdGF0YWJsZSAtLS0gb2ZmaWNpYWwgZG9jcyByZWZlcmVuY2U6IGh0dHBzOi8vZGF0YXRhYmxlcy5uZXQvcmVmZXJlbmNlL2FwaS9zZWFyY2goKVxyXG4gICAgdmFyIGhhbmRsZVNlYXJjaERhdGF0YWJsZSA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBmaWx0ZXJTZWFyY2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC11c2VyLXRhYmxlLWZpbHRlcj1cInNlYXJjaFwiXScpO1xyXG4gICAgICAgIGZpbHRlclNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGRhdGF0YWJsZS5zZWFyY2goZS50YXJnZXQudmFsdWUpLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGaWx0ZXIgRGF0YXRhYmxlXHJcbiAgICB2YXIgaGFuZGxlRmlsdGVyRGF0YXRhYmxlID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFNlbGVjdCBmaWx0ZXIgb3B0aW9uc1xyXG4gICAgICAgIGNvbnN0IGZpbHRlckZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC11c2VyLXRhYmxlLWZpbHRlcj1cImZvcm1cIl0nKTtcclxuICAgICAgICBjb25zdCBmaWx0ZXJCdXR0b24gPSBmaWx0ZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXVzZXItdGFibGUtZmlsdGVyPVwiZmlsdGVyXCJdJyk7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0T3B0aW9ucyA9IGZpbHRlckZvcm0ucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0Jyk7XHJcblxyXG4gICAgICAgIC8vIEZpbHRlciBkYXRhdGFibGUgb24gc3VibWl0XHJcbiAgICAgICAgZmlsdGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZmlsdGVyU3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgZmlsdGVyIHZhbHVlc1xyXG4gICAgICAgICAgICBzZWxlY3RPcHRpb25zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSAmJiBpdGVtLnZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTdHJpbmcgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQnVpbGQgZmlsdGVyIHZhbHVlIG9wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTdHJpbmcgKz0gaXRlbS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBGaWx0ZXIgZGF0YXRhYmxlIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9yZWZlcmVuY2UvYXBpL3NlYXJjaCgpXHJcbiAgICAgICAgICAgIGRhdGF0YWJsZS5zZWFyY2goZmlsdGVyU3RyaW5nKS5kcmF3KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVzZXQgRmlsdGVyXHJcbiAgICB2YXIgaGFuZGxlUmVzZXRGb3JtID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFNlbGVjdCByZXNldCBidXR0b25cclxuICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXVzZXItdGFibGUtZmlsdGVyPVwicmVzZXRcIl0nKTtcclxuXHJcbiAgICAgICAgLy8gUmVzZXQgZGF0YXRhYmxlXHJcbiAgICAgICAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIFNlbGVjdCBmaWx0ZXIgb3B0aW9uc1xyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtdXNlci10YWJsZS1maWx0ZXI9XCJmb3JtXCJdJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdE9wdGlvbnMgPSBmaWx0ZXJGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVzZXQgc2VsZWN0MiB2YWx1ZXMgLS0gbW9yZSBpbmZvOiBodHRwczovL3NlbGVjdDIub3JnL3Byb2dyYW1tYXRpYy1jb250cm9sL2FkZC1zZWxlY3QtY2xlYXItaXRlbXNcclxuICAgICAgICAgICAgc2VsZWN0T3B0aW9ucy5mb3JFYWNoKHNlbGVjdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAkKHNlbGVjdCkudmFsKCcnKS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZXNldCBkYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcclxuICAgICAgICAgICAgZGF0YXRhYmxlLnNlYXJjaCgnJykuZHJhdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBEZWxldGUgc3Vic2NpcnB0aW9uXHJcbiAgICB2YXIgaGFuZGxlRGVsZXRlUm93cyA9ICgpID0+IHtcclxuICAgICAgICAvLyBTZWxlY3QgYWxsIGRlbGV0ZSBidXR0b25zXHJcbiAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9ucyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LXVzZXJzLXRhYmxlLWZpbHRlcj1cImRlbGV0ZV9yb3dcIl0nKTtcclxuXHJcbiAgICAgICAgZGVsZXRlQnV0dG9ucy5mb3JFYWNoKGQgPT4ge1xyXG4gICAgICAgICAgICAvLyBEZWxldGUgYnV0dG9uIG9uIGNsaWNrXHJcbiAgICAgICAgICAgIGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBwYXJlbnQgcm93XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBlLnRhcmdldC5jbG9zZXN0KCd0cicpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEdldCB1c2VyIG5hbWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJOYW1lID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJylbMV0ucXVlcnlTZWxlY3RvckFsbCgnYScpWzFdLmlubmVyVGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTd2VldEFsZXJ0MiBwb3AgdXAgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pby9cclxuICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIFwiICsgdXNlck5hbWUgKyBcIj9cIixcclxuICAgICAgICAgICAgICAgICAgICBpY29uOiBcIndhcm5pbmdcIixcclxuICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZSFcIixcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBjYW5jZWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1kYW5nZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1hY3RpdmUtbGlnaHQtcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJZb3UgaGF2ZSBkZWxldGVkIFwiICsgdXNlck5hbWUgKyBcIiEuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY3VycmVudCByb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5yb3coJChwYXJlbnQpKS5yZW1vdmUoKS5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZWN0IGNoZWNrZWQgY2hlY2tib3hlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlVG9vbGJhcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGN1c3RvbWVyTmFtZSArIFwiIHdhcyBub3QgZGVsZXRlZC5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5pdCB0b2dnbGUgdG9vbGJhclxyXG4gICAgdmFyIGluaXRUb2dnbGVUb29sYmFyID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFRvZ2dsZSBzZWxlY3RlZCBhY3Rpb24gdG9vbGJhclxyXG4gICAgICAgIC8vIFNlbGVjdCBhbGwgY2hlY2tib3hlc1xyXG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdbdHlwZT1cImNoZWNrYm94XCJdJyk7XHJcblxyXG4gICAgICAgIC8vIFNlbGVjdCBlbGVtZW50c1xyXG4gICAgICAgIHRvb2xiYXJCYXNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtdXNlci10YWJsZS10b29sYmFyPVwiYmFzZVwiXScpO1xyXG4gICAgICAgIHRvb2xiYXJTZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXVzZXItdGFibGUtdG9vbGJhcj1cInNlbGVjdGVkXCJdJyk7XHJcbiAgICAgICAgc2VsZWN0ZWRDb3VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXVzZXItdGFibGUtc2VsZWN0PVwic2VsZWN0ZWRfY291bnRcIl0nKTtcclxuICAgICAgICBjb25zdCBkZWxldGVTZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXVzZXItdGFibGUtc2VsZWN0PVwiZGVsZXRlX3NlbGVjdGVkXCJdJyk7XHJcblxyXG4gICAgICAgIC8vIFRvZ2dsZSBkZWxldGUgc2VsZWN0ZWQgdG9vbGJhclxyXG4gICAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgLy8gQ2hlY2tib3ggb24gY2xpY2sgZXZlbnRcclxuICAgICAgICAgICAgYy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7XHJcbiAgICAgICAgICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBEZWxldGVkIHNlbGVjdGVkIHJvd3NcclxuICAgICAgICBkZWxldGVTZWxlY3RlZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gU3dlZXRBbGVydDIgcG9wIHVwIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXHJcbiAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgc2VsZWN0ZWQgY3VzdG9tZXJzP1wiLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBkZWxldGUhXCIsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBjYW5jZWxcIixcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tZGFuZ2VyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1hY3RpdmUtbGlnaHQtcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91IGhhdmUgZGVsZXRlZCBhbGwgc2VsZWN0ZWQgY3VzdG9tZXJzIS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJzdWNjZXNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYWxsIHNlbGVjdGVkIGN1c3RvbWVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveGVzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXRhYmxlLnJvdygkKGMuY2xvc2VzdCgndGJvZHkgdHInKSkpLnJlbW92ZSgpLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgaGVhZGVyIGNoZWNrZWQgYm94XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckNoZWNrYm94ID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgnW3R5cGU9XCJjaGVja2JveFwiXScpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDaGVja2JveC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7IC8vIERldGVjdCBjaGVja2VkIGNoZWNrYm94ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFRvZ2dsZVRvb2xiYXIoKTsgLy8gUmUtaW5pdCB0b29sYmFyIHRvIHJlY2FsY3VsYXRlIGNoZWNrYm94ZXNcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTZWxlY3RlZCBjdXN0b21lcnMgd2FzIG5vdCBkZWxldGVkLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUb2dnbGUgdG9vbGJhcnNcclxuICAgIGNvbnN0IHRvZ2dsZVRvb2xiYXJzID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFNlbGVjdCByZWZyZXNoZWQgY2hlY2tib3ggRE9NIGVsZW1lbnRzIFxyXG4gICAgICAgIGNvbnN0IGFsbENoZWNrYm94ZXMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSBbdHlwZT1cImNoZWNrYm94XCJdJyk7XHJcblxyXG4gICAgICAgIC8vIERldGVjdCBjaGVja2JveGVzIHN0YXRlICYgY291bnRcclxuICAgICAgICBsZXQgY2hlY2tlZFN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgLy8gQ291bnQgY2hlY2tlZCBib3hlc1xyXG4gICAgICAgIGFsbENoZWNrYm94ZXMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgaWYgKGMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tlZFN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVG9nZ2xlIHRvb2xiYXJzXHJcbiAgICAgICAgaWYgKGNoZWNrZWRTdGF0ZSkge1xyXG4gICAgICAgICAgICBzZWxlY3RlZENvdW50LmlubmVySFRNTCA9IGNvdW50O1xyXG4gICAgICAgICAgICB0b29sYmFyQmFzZS5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgICAgICAgICAgdG9vbGJhclNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRvb2xiYXJCYXNlLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICB0b29sYmFyU2VsZWN0ZWQuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8gUHVibGljIGZ1bmN0aW9ucyAgXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXRVc2VyVGFibGUoKTtcclxuICAgICAgICAgICAgaW5pdFRvZ2dsZVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgaGFuZGxlU2VhcmNoRGF0YXRhYmxlKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZVJlc2V0Rm9ybSgpO1xyXG4gICAgICAgICAgICBoYW5kbGVEZWxldGVSb3dzKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZUZpbHRlckRhdGF0YWJsZSgpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oKTtcclxuXHJcbi8vIE9uIGRvY3VtZW50IHJlYWR5XHJcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgS1RVc2Vyc0xpc3QuaW5pdCgpO1xyXG59KTsiXSwibmFtZXMiOlsiS1RVc2Vyc0xpc3QiLCJ0YWJsZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkYXRhdGFibGUiLCJ0b29sYmFyQmFzZSIsInRvb2xiYXJTZWxlY3RlZCIsInNlbGVjdGVkQ291bnQiLCJpbml0VXNlclRhYmxlIiwidGFibGVSb3dzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJyb3ciLCJkYXRlUm93IiwibGFzdExvZ2luIiwiaW5uZXJUZXh0IiwidG9Mb3dlckNhc2UiLCJ0aW1lQ291bnQiLCJ0aW1lRm9ybWF0IiwiaW5jbHVkZXMiLCJwYXJzZUludCIsInJlcGxhY2UiLCJyZWFsRGF0ZSIsIm1vbWVudCIsInN1YnRyYWN0IiwiZm9ybWF0Iiwic2V0QXR0cmlidXRlIiwiam9pbmVkRGF0ZSIsImlubmVySFRNTCIsIiQiLCJEYXRhVGFibGUiLCJvcmRlcmFibGUiLCJ0YXJnZXRzIiwib24iLCJpbml0VG9nZ2xlVG9vbGJhciIsImhhbmRsZURlbGV0ZVJvd3MiLCJ0b2dnbGVUb29sYmFycyIsImhhbmRsZVNlYXJjaERhdGF0YWJsZSIsImZpbHRlclNlYXJjaCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInNlYXJjaCIsInRhcmdldCIsInZhbHVlIiwiZHJhdyIsImhhbmRsZUZpbHRlckRhdGF0YWJsZSIsImZpbHRlckZvcm0iLCJmaWx0ZXJCdXR0b24iLCJzZWxlY3RPcHRpb25zIiwiZmlsdGVyU3RyaW5nIiwiaXRlbSIsImluZGV4IiwiaGFuZGxlUmVzZXRGb3JtIiwicmVzZXRCdXR0b24iLCJzZWxlY3QiLCJ2YWwiLCJ0cmlnZ2VyIiwiZGVsZXRlQnV0dG9ucyIsImQiLCJwcmV2ZW50RGVmYXVsdCIsInBhcmVudCIsImNsb3Nlc3QiLCJ1c2VyTmFtZSIsIlN3YWwiLCJmaXJlIiwidGV4dCIsImljb24iLCJzaG93Q2FuY2VsQnV0dG9uIiwiYnV0dG9uc1N0eWxpbmciLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJjdXN0b21DbGFzcyIsImNvbmZpcm1CdXR0b24iLCJjYW5jZWxCdXR0b24iLCJ0aGVuIiwicmVzdWx0IiwicmVtb3ZlIiwiZGlzbWlzcyIsImN1c3RvbWVyTmFtZSIsImNoZWNrYm94ZXMiLCJkZWxldGVTZWxlY3RlZCIsImMiLCJzZXRUaW1lb3V0IiwiY2hlY2tlZCIsImhlYWRlckNoZWNrYm94IiwiYWxsQ2hlY2tib3hlcyIsImNoZWNrZWRTdGF0ZSIsImNvdW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5pdCIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/users/list/table.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/user-management/users/list/table.js"]();
/******/ 	
/******/ })()
;