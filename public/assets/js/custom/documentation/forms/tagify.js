/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/forms/tagify.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/forms/tagify.js ***!
  \***********************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTFormsTagifyDemos = function () {\n  // Private functions\n  var example1 = function example1(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_1\");\n    var input2 = document.querySelector(\"#kt_tagify_2\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1, {\n      placeholder: \"Type something\"\n    });\n    new Tagify(input2, {\n      placeholder: \"Type something\"\n    });\n  };\n\n  var example2 = function example2(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_3\");\n    var input2 = document.querySelector(\"#kt_tagify_4\");\n    var input3 = document.querySelector(\"#kt_tagify_5\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1);\n    new Tagify(input2);\n    new Tagify(input3);\n  };\n\n  var example3 = function example3(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_6\");\n    var input2 = document.querySelector(\"#kt_tagify_7\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1, {\n      whitelist: [\"A# .NET\", \"A# (Axiom)\", \"A-0 System\", \"A+\", \"A++\", \"ABAP\", \"ABC\", \"ABC ALGOL\", \"ABSET\", \"ABSYS\", \"ACC\", \"Accent\", \"Ace DASL\", \"ACL2\", \"Avicsoft\", \"ACT-III\", \"Action!\", \"ActionScript\", \"Ada\", \"Adenine\", \"Agda\", \"Agilent VEE\", \"Agora\", \"AIMMS\", \"Alef\", \"ALF\", \"ALGOL 58\", \"ALGOL 60\", \"ALGOL 68\", \"ALGOL W\", \"Alice\", \"Alma-0\", \"AmbientTalk\", \"Amiga E\", \"AMOS\", \"AMPL\", \"Apex (Salesforce.com)\", \"APL\", \"AppleScript\", \"Arc\", \"ARexx\", \"Argus\", \"AspectJ\", \"Assembly language\", \"ATS\", \"Ateji PX\", \"AutoHotkey\", \"Autocoder\", \"AutoIt\", \"AutoLISP / Visual LISP\", \"Averest\", \"AWK\", \"Axum\", \"Active Server Pages\", \"ASP.NET\", \"B\", \"Babbage\", \"Bash\", \"BASIC\", \"bc\", \"BCPL\", \"BeanShell\", \"Batch (Windows/Dos)\", \"Bertrand\", \"BETA\", \"Bigwig\", \"Bistro\", \"BitC\", \"BLISS\", \"Blockly\", \"BlooP\", \"Blue\", \"Boo\", \"Boomerang\", \"Bourne shell (including bash and ksh)\", \"BREW\", \"BPEL\", \"B\", \"C--\", \"C++ – ISO/IEC 14882\", \"C# – ISO/IEC 23270\", \"C/AL\", \"Caché ObjectScript\", \"C Shell\", \"Caml\", \"Cayenne\", \"CDuce\", \"Cecil\", \"Cesil\", \"Céu\", \"Ceylon\", \"CFEngine\", \"CFML\", \"Cg\", \"Ch\", \"Chapel\", \"Charity\", \"Charm\", \"Chef\", \"CHILL\", \"CHIP-8\", \"chomski\", \"ChucK\", \"CICS\", \"Cilk\", \"Citrine (programming language)\", \"CL (IBM)\", \"Claire\", \"Clarion\", \"Clean\", \"Clipper\", \"CLIPS\", \"CLIST\", \"Clojure\", \"CLU\", \"CMS-2\", \"COBOL – ISO/IEC 1989\", \"CobolScript – COBOL Scripting language\", \"Cobra\", \"CODE\", \"CoffeeScript\", \"ColdFusion\", \"COMAL\", \"Combined Programming Language (CPL)\", \"COMIT\", \"Common Intermediate Language (CIL)\", \"Common Lisp (also known as CL)\", \"COMPASS\", \"Component Pascal\", \"Constraint Handling Rules (CHR)\", \"COMTRAN\", \"Converge\", \"Cool\", \"Coq\", \"Coral 66\", \"Corn\", \"CorVision\", \"COWSEL\", \"CPL\", \"CPL\", \"Cryptol\", \"csh\", \"Csound\", \"CSP\", \"CUDA\", \"Curl\", \"Curry\", \"Cybil\", \"Cyclone\", \"Cython\", \"Java\", \"Javascript\", \"M2001\", \"M4\", \"M#\", \"Machine code\", \"MAD (Michigan Algorithm Decoder)\", \"MAD/I\", \"Magik\", \"Magma\", \"make\", \"Maple\", \"MAPPER now part of BIS\", \"MARK-IV now VISION:BUILDER\", \"Mary\", \"MASM Microsoft Assembly x86\", \"MATH-MATIC\", \"Mathematica\", \"MATLAB\", \"Maxima (see also Macsyma)\", \"Max (Max Msp – Graphical Programming Environment)\", \"Maya (MEL)\", \"MDL\", \"Mercury\", \"Mesa\", \"Metafont\", \"Microcode\", \"MicroScript\", \"MIIS\", \"Milk (programming language)\", \"MIMIC\", \"Mirah\", \"Miranda\", \"MIVA Script\", \"ML\", \"Model 204\", \"Modelica\", \"Modula\", \"Modula-2\", \"Modula-3\", \"Mohol\", \"MOO\", \"Mortran\", \"Mouse\", \"MPD\", \"Mathcad\", \"MSIL – deprecated name for CIL\", \"MSL\", \"MUMPS\", \"Mystic Programming L\"],\n      maxTags: 10,\n      dropdown: {\n        maxItems: 20,\n        // <- mixumum allowed rendered suggestions\n        classname: \"tagify__inline__suggestions\",\n        // <- custom classname for this dropdown, so it could be targeted\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n\n      }\n    });\n    new Tagify(input2, {\n      whitelist: [\"A# .NET\", \"A# (Axiom)\", \"A-0 System\", \"A+\", \"A++\", \"ABAP\", \"ABC\", \"ABC ALGOL\", \"ABSET\", \"ABSYS\", \"ACC\", \"Accent\", \"Ace DASL\", \"ACL2\", \"Avicsoft\", \"ACT-III\", \"Action!\", \"ActionScript\", \"Ada\", \"Adenine\", \"Agda\", \"Agilent VEE\", \"Agora\", \"AIMMS\", \"Alef\", \"ALF\", \"ALGOL 58\", \"ALGOL 60\", \"ALGOL 68\", \"ALGOL W\", \"Alice\", \"Alma-0\", \"AmbientTalk\", \"Amiga E\", \"AMOS\", \"AMPL\", \"Apex (Salesforce.com)\", \"APL\", \"AppleScript\", \"Arc\", \"ARexx\", \"Argus\", \"AspectJ\", \"Assembly language\", \"ATS\", \"Ateji PX\", \"AutoHotkey\", \"Autocoder\", \"AutoIt\", \"AutoLISP / Visual LISP\", \"Averest\", \"AWK\", \"Axum\", \"Active Server Pages\", \"ASP.NET\", \"B\", \"Babbage\", \"Bash\", \"BASIC\", \"bc\", \"BCPL\", \"BeanShell\", \"Batch (Windows/Dos)\", \"Bertrand\", \"BETA\", \"Bigwig\", \"Bistro\", \"BitC\", \"BLISS\", \"Blockly\", \"BlooP\", \"Blue\", \"Boo\", \"Boomerang\", \"Bourne shell (including bash and ksh)\", \"BREW\", \"BPEL\", \"B\", \"C--\", \"C++ – ISO/IEC 14882\", \"C# – ISO/IEC 23270\", \"C/AL\", \"Caché ObjectScript\", \"C Shell\", \"Caml\", \"Cayenne\", \"CDuce\", \"Cecil\", \"Cesil\", \"Céu\", \"Ceylon\", \"CFEngine\", \"CFML\", \"Cg\", \"Ch\", \"Chapel\", \"Charity\", \"Charm\", \"Chef\", \"CHILL\", \"CHIP-8\", \"chomski\", \"ChucK\", \"CICS\", \"Cilk\", \"Citrine (programming language)\", \"CL (IBM)\", \"Claire\", \"Clarion\", \"Clean\", \"Clipper\", \"CLIPS\", \"CLIST\", \"Clojure\", \"CLU\", \"CMS-2\", \"COBOL – ISO/IEC 1989\", \"CobolScript – COBOL Scripting language\", \"Cobra\", \"CODE\", \"CoffeeScript\", \"ColdFusion\", \"COMAL\", \"Combined Programming Language (CPL)\", \"COMIT\", \"Common Intermediate Language (CIL)\", \"Common Lisp (also known as CL)\", \"COMPASS\", \"Component Pascal\", \"Constraint Handling Rules (CHR)\", \"COMTRAN\", \"Converge\", \"Cool\", \"Coq\", \"Coral 66\", \"Corn\", \"CorVision\", \"COWSEL\", \"CPL\", \"CPL\", \"Cryptol\", \"csh\", \"Csound\", \"CSP\", \"CUDA\", \"Curl\", \"Curry\", \"Cybil\", \"Cyclone\", \"Cython\", \"Java\", \"Javascript\", \"M2001\", \"M4\", \"M#\", \"Machine code\", \"MAD (Michigan Algorithm Decoder)\", \"MAD/I\", \"Magik\", \"Magma\", \"make\", \"Maple\", \"MAPPER now part of BIS\", \"MARK-IV now VISION:BUILDER\", \"Mary\", \"MASM Microsoft Assembly x86\", \"MATH-MATIC\", \"Mathematica\", \"MATLAB\", \"Maxima (see also Macsyma)\", \"Max (Max Msp – Graphical Programming Environment)\", \"Maya (MEL)\", \"MDL\", \"Mercury\", \"Mesa\", \"Metafont\", \"Microcode\", \"MicroScript\", \"MIIS\", \"Milk (programming language)\", \"MIMIC\", \"Mirah\", \"Miranda\", \"MIVA Script\", \"ML\", \"Model 204\", \"Modelica\", \"Modula\", \"Modula-2\", \"Modula-3\", \"Mohol\", \"MOO\", \"Mortran\", \"Mouse\", \"MPD\", \"Mathcad\", \"MSIL – deprecated name for CIL\", \"MSL\", \"MUMPS\", \"Mystic Programming L\"],\n      maxTags: 10,\n      dropdown: {\n        maxItems: 20,\n        // <- mixumum allowed rendered suggestions\n        classname: \"\",\n        // <- custom classname for this dropdown, so it could be targeted\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n\n      }\n    });\n  };\n\n  var example4 = function example4(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_8\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1);\n  };\n\n  var exampleCustomSuggestions = function exampleCustomSuggestions() {\n    var input = document.querySelector('#kt_tagify_custom'),\n        // Init Tagify script on the above inputs\n    tagify = new Tagify(input, {\n      whitelist: [\"Bootstrap\", \"Angular\", \"React\", \"Vue\"],\n      placeholder: \"Type something\",\n      enforceWhitelist: true\n    }); // Suggestions\n\n    var suggestions = document.querySelector('#kt_tagify_custom_suggestions'); // Suggestion item click\n\n    KTUtil.on(suggestions, '[data-kt-suggestion=\"true\"]', 'click', function (e) {\n      tagify.addTags([this.innerText]);\n    });\n  };\n\n  var exampleCountry = function exampleCountry() {\n    var tagify = new Tagify(document.querySelector('#kt_tagify_country'), {\n      delimiters: null,\n      templates: {\n        tag: function tag(tagData) {\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\s+/g, '-') + '.svg';\n\n          try {\n            // _ESCAPE_START_\n            return \"<tag title='\".concat(tagData.value, \"' contenteditable='false' spellcheck=\\\"false\\\" class='tagify__tag \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"' \").concat(this.getAttributes(tagData), \">\\n                                <x title='remove tag' class='tagify__tag__removeBtn'></x>\\n                                <div class=\\\"d-flex align-items-center\\\">\\n                                    \").concat(tagData.code ? \"<img onerror=\\\"this.style.visibility = 'hidden'\\\" class=\\\"w-25px rounded-circle me-2\\\" src='\".concat(countryPath, \"' />\") : '', \"\\n                                    <span class='tagify__tag-text'>\").concat(tagData.value, \"</span>\\n                                </div>\\n                            </tag>\"); // _ESCAPE_END_\n          } catch (err) {}\n        },\n        dropdownItem: function dropdownItem(tagData) {\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\s+/g, '-') + '.svg';\n\n          try {\n            // _ESCAPE_START_\n            return \"<div class='tagify__dropdown__item \".concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"'>\\n                                    <img onerror=\\\"this.style.visibility = 'hidden'\\\" class=\\\"w-25px rounded-circle me-2\\\"\\n                                         src='\").concat(countryPath, \"' />\\n                                    <span>\").concat(tagData.value, \"</span>\\n                                </div>\"); // _ESCAPE_END_\n          } catch (err) {}\n        }\n      },\n      enforceWhitelist: true,\n      whitelist: [{\n        value: 'Argentina',\n        code: 'AR'\n      }, {\n        value: 'Australia',\n        code: 'AU',\n        searchBy: 'beach, sub-tropical'\n      }, {\n        value: 'Austria',\n        code: 'AT'\n      }, {\n        value: 'Brazil',\n        code: 'BR'\n      }, {\n        value: 'China',\n        code: 'CN'\n      }, {\n        value: 'Egypt',\n        code: 'EG'\n      }, {\n        value: 'Finland',\n        code: 'FI'\n      }, {\n        value: 'France',\n        code: 'FR'\n      }, {\n        value: 'Germany',\n        code: 'DE'\n      }, {\n        value: 'Hong Kong',\n        code: 'HK'\n      }, {\n        value: 'Hungary',\n        code: 'HU'\n      }, {\n        value: 'Iceland',\n        code: 'IS'\n      }, {\n        value: 'India',\n        code: 'IN'\n      }, {\n        value: 'Indonesia',\n        code: 'ID'\n      }, {\n        value: 'Italy',\n        code: 'IT'\n      }, {\n        value: 'Jamaica',\n        code: 'JM'\n      }, {\n        value: 'Japan',\n        code: 'JP'\n      }, {\n        value: 'Jersey',\n        code: 'JE'\n      }, {\n        value: 'Luxembourg',\n        code: 'LU'\n      }, {\n        value: 'Mexico',\n        code: 'MX'\n      }, {\n        value: 'Netherlands',\n        code: 'NL'\n      }, {\n        value: 'New Zealand',\n        code: 'NZ'\n      }, {\n        value: 'Norway',\n        code: 'NO'\n      }, {\n        value: 'Philippines',\n        code: 'PH'\n      }, {\n        value: 'Singapore',\n        code: 'SG'\n      }, {\n        value: 'South Korea',\n        code: 'KR'\n      }, {\n        value: 'Sweden',\n        code: 'SE'\n      }, {\n        value: 'Switzerland',\n        code: 'CH'\n      }, {\n        value: 'Thailand',\n        code: 'TH'\n      }, {\n        value: 'Ukraine',\n        code: 'UA'\n      }, {\n        value: 'United Kingdom',\n        code: 'GB'\n      }, {\n        value: 'United States',\n        code: 'US'\n      }, {\n        value: 'Vietnam',\n        code: 'VN'\n      }],\n      dropdown: {\n        enabled: 1,\n        // suggest tags after a single character input\n        classname: 'extra-properties' // custom class for the suggestions dropdown\n\n      } // map tags' values to this property name, so this property will be the actual value and not the printed value on the screen\n\n    }); // add the first 2 tags and makes them readonly\n\n    var tagsToAdd = tagify.settings.whitelist.slice(0, 2);\n    tagify.addTags(tagsToAdd);\n  };\n\n  var exampleUsers = function exampleUsers() {\n    var inputElm = document.querySelector('#kt_tagify_users');\n    var usersList = [{\n      value: 1,\n      name: 'Emma Smith',\n      avatar: 'avatars/300-6.jpg',\n      email: 'e.smith@kpmg.com.au'\n    }, {\n      value: 2,\n      name: 'Max Smith',\n      avatar: 'avatars/300-1.jpg',\n      email: 'max@kt.com'\n    }, {\n      value: 3,\n      name: 'Sean Bean',\n      avatar: 'avatars/300-5.jpg',\n      email: 'sean@dellito.com'\n    }, {\n      value: 4,\n      name: 'Brian Cox',\n      avatar: 'avatars/300-25.jpg',\n      email: 'brian@exchange.com'\n    }, {\n      value: 5,\n      name: 'Francis Mitcham',\n      avatar: 'avatars/300-9.jpg',\n      email: 'f.mitcham@kpmg.com.au'\n    }, {\n      value: 6,\n      name: 'Dan Wilson',\n      avatar: 'avatars/300-23.jpg',\n      email: 'dam@consilting.com'\n    }, {\n      value: 7,\n      name: 'Ana Crown',\n      avatar: 'avatars/300-12.jpg',\n      email: 'ana.cf@limtel.com'\n    }, {\n      value: 8,\n      name: 'John Miller',\n      avatar: 'avatars/300-13.jpg',\n      email: 'miller@mapple.com'\n    }];\n\n    function tagTemplate(tagData) {\n      return \"\\n                <tag title=\\\"\".concat(tagData.title || tagData.email, \"\\\"\\n                        contenteditable='false'\\n                        spellcheck='false'\\n                        tabIndex=\\\"-1\\\"\\n                        class=\\\"\").concat(this.settings.classNames.tag, \" \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"\\\"\\n                        \").concat(this.getAttributes(tagData), \">\\n                    <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <div class='tagify__tag__avatar-wrap ps-0'>\\n                            <img onerror=\\\"this.style.visibility='hidden'\\\" class=\\\"rounded-circle w-25px me-2\\\" src=\\\"\").concat(hostUrl, \"media/\").concat(tagData.avatar, \"\\\">\\n                        </div>\\n                        <span class='tagify__tag-text'>\").concat(tagData.name, \"</span>\\n                    </div>\\n                </tag>\\n            \");\n    }\n\n    function suggestionItemTemplate(tagData) {\n      return \"\\n                <div \".concat(this.getAttributes(tagData), \"\\n                    class='tagify__dropdown__item d-flex align-items-center \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"'\\n                    tabindex=\\\"0\\\"\\n                    role=\\\"option\\\">\\n\\n                    \").concat(tagData.avatar ? \"\\n                            <div class='tagify__dropdown__item__avatar-wrap me-2'>\\n                                <img onerror=\\\"this.style.visibility='hidden'\\\"  class=\\\"rounded-circle w-50px me-2\\\" src=\\\"\".concat(hostUrl, \"media/\").concat(tagData.avatar, \"\\\">\\n                            </div>\") : '', \"\\n\\n                    <div class=\\\"d-flex flex-column\\\">\\n                        <strong>\").concat(tagData.name, \"</strong>\\n                        <span>\").concat(tagData.email, \"</span>\\n                    </div>\\n                </div>\\n            \");\n    } // initialize Tagify on the above input node reference\n\n\n    var tagify = new Tagify(inputElm, {\n      tagTextProp: 'name',\n      // very important since a custom template is used with this property as text. allows typing a \"value\" or a \"name\" to match input with whitelist\n      enforceWhitelist: true,\n      skipInvalid: true,\n      // do not remporarily add invalid tags\n      dropdown: {\n        closeOnSelect: false,\n        enabled: 0,\n        classname: 'users-list',\n        searchKeys: ['name', 'email'] // very important to set by which keys to search for suggesttions when typing\n\n      },\n      templates: {\n        tag: tagTemplate,\n        dropdownItem: suggestionItemTemplate\n      },\n      whitelist: usersList\n    });\n    tagify.on('dropdown:show dropdown:updated', onDropdownShow);\n    tagify.on('dropdown:select', onSelectSuggestion);\n    var addAllSuggestionsElm;\n\n    function onDropdownShow(e) {\n      var dropdownContentElm = e.detail.tagify.DOM.dropdown.content;\n\n      if (tagify.suggestedListItems.length > 1) {\n        addAllSuggestionsElm = getAddAllSuggestionsElm(); // insert \"addAllSuggestionsElm\" as the first element in the suggestions list\n\n        dropdownContentElm.insertBefore(addAllSuggestionsElm, dropdownContentElm.firstChild);\n      }\n    }\n\n    function onSelectSuggestion(e) {\n      if (e.detail.elm == addAllSuggestionsElm) tagify.dropdown.selectAll.call(tagify);\n    } // create a \"add all\" custom suggestion element every time the dropdown changes\n\n\n    function getAddAllSuggestionsElm() {\n      // suggestions items should be based on \"dropdownItem\" template\n      return tagify.parseTemplate('dropdownItem', [{\n        \"class\": \"addAll\",\n        name: \"Add all\",\n        email: tagify.settings.whitelist.reduce(function (remainingSuggestions, item) {\n          return tagify.isTagDuplicate(item.value) ? remainingSuggestions : remainingSuggestions + 1;\n        }, 0) + \" Members\"\n      }]);\n    }\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      example1();\n      example2();\n      example3();\n      example4();\n      exampleCustomSuggestions();\n      exampleCountry();\n      exampleUsers();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFormsTagifyDemos.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/tagify.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/forms/tagify.js"]();
/******/ 	
/******/ })()
;